module deal_voice(clk, reset, ADC_SDATA, ChangeEn, RisingTone, 
	DAC_SDATA, MCLK, BCLK, LRCLK, SDA, SCL, errory);
	input clk, reset, ADC_SDATA, ChangeEn, RisingTone;
	output DAC_SDATA, MCLK, BCLK, LRCLK, SDA, SCL, errory;
	
	wire[15:0] Sampletemp, SampleOut;
	reg[1:0]  q_clk;
	//clk 处理
	always @(posedge clk) 
	begin
		if (reset)
			q_clk = 0;
		else
			q_clk = q_clk + 1;
	end
	wire sys_clk;
	assign sys_clk = (q_clk == 2'b11);
	
	reg audio_clk;
	always @(posedge sys_clk)
	begin
		if (reset)
			audio_clk = 0;
		else
			audio_clk = audio_clk + 1;
	end


	//音频输入处理
	wire[23:0] LeftPlayData, RightPlayData, LeftRecData, RightRecData;
    wire NewFrame;
	de_coder de_coder(
		.audio_clk(audio_clk), 
		.reset(reset), 
		.ADC_SDATA(ADC_SDATA), 
		.LeftPlayData(LeftPlayData), 
		.RightPlayData(RightPlayData), 
		//output
		.LeftRecData(LeftRecData), 
		.RightRecData(RightRecData), 
		.DAC_SDATA(DAC_SDATA), 
		.MCLK(MCLK), 
		.BCLK(BCLK), 
		.LRCLK(LRCLK), 
		.NewFrame(NewFrame), 
		.SDA(SDA), 
		.SCL(SCL), 
		.errory(errory)
		);
    wire temp, ready;
	D_tr #(.N(1)) D1(.d(NewFrame), .clk(sys_clk), .r(reset), .q(temp), .en(1'b1));
	D_tr #(.N(1)) D2(.d(temp), .clk(sys_clk), .r(reset), .q(ready), .en(1'b1));
	
	firh firh(.sample(ready),.in(RecDataR[23:8]),.clk(sys_clk),.out(Sampletemp));
	
	changevoice changevoice(.SampleIn(RisingTone?Sampletemp:RecDataR[23:8]),.ready(ready),.clk(sys_clk),
	  .RisingTone(RisingTone),.reset(reset),.SampleOut(SampleOut),.SampleCount());
  
  assign RightPlayData = ChangeEn?{SampleOut,8'd0}:RightRecData;
  assign LeftPlayData = ChangeEn?{SampleOut,8'd0}:LeftRecData;
  
endmodule